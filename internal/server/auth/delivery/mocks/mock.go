// Code generated by MockGen. DO NOT EDIT.
// Source: auth_interfaces.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_sigmaScript/internal/server/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserServiceInterface) CreateUser(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceInterfaceMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceInterface)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUserServiceInterface) DeleteUser(ctx context.Context, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceInterfaceMockRecorder) DeleteUser(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserServiceInterface)(nil).DeleteUser), ctx, login)
}

// GetUser mocks base method.
func (m *MockUserServiceInterface) GetUser(ctx context.Context, login string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, login)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceInterfaceMockRecorder) GetUser(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceInterface)(nil).GetUser), ctx, login)
}

// Login mocks base method.
func (m *MockUserServiceInterface) Login(ctx context.Context, loginData models.LoginData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, loginData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceInterfaceMockRecorder) Login(ctx, loginData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServiceInterface)(nil).Login), ctx, loginData)
}

// UpdateUser mocks base method.
func (m *MockUserServiceInterface) UpdateUser(ctx context.Context, login string, newUser *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, login, newUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceInterfaceMockRecorder) UpdateUser(ctx, login, newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServiceInterface)(nil).UpdateUser), ctx, login, newUser)
}

// UpdateUserAvatar mocks base method.
func (m *MockUserServiceInterface) UpdateUserAvatar(ctx context.Context, uploadDir string, handler *multipart.FileHeader, avatarFile multipart.File, user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAvatar", ctx, uploadDir, handler, avatarFile, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserAvatar indicates an expected call of UpdateUserAvatar.
func (mr *MockUserServiceInterfaceMockRecorder) UpdateUserAvatar(ctx, uploadDir, handler, avatarFile, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAvatar", reflect.TypeOf((*MockUserServiceInterface)(nil).UpdateUserAvatar), ctx, uploadDir, handler, avatarFile, user)
}

// MockSessionServiceInterface is a mock of SessionServiceInterface interface.
type MockSessionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceInterfaceMockRecorder
}

// MockSessionServiceInterfaceMockRecorder is the mock recorder for MockSessionServiceInterface.
type MockSessionServiceInterfaceMockRecorder struct {
	mock *MockSessionServiceInterface
}

// NewMockSessionServiceInterface creates a new mock instance.
func NewMockSessionServiceInterface(ctrl *gomock.Controller) *MockSessionServiceInterface {
	mock := &MockSessionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSessionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionServiceInterface) EXPECT() *MockSessionServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSessionServiceInterface) CreateSession(ctx context.Context, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionServiceInterfaceMockRecorder) CreateSession(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionServiceInterface)(nil).CreateSession), ctx, username)
}

// DeleteSession mocks base method.
func (m *MockSessionServiceInterface) DeleteSession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionServiceInterfaceMockRecorder) DeleteSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionServiceInterface)(nil).DeleteSession), ctx, sessionID)
}

// GetSession mocks base method.
func (m *MockSessionServiceInterface) GetSession(ctx context.Context, sessionID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, sessionID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockSessionServiceInterfaceMockRecorder) GetSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionServiceInterface)(nil).GetSession), ctx, sessionID)
}
