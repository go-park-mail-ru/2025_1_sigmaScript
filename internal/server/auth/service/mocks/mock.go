// Code generated by MockGen. DO NOT EDIT.
// Source: sessionService.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionRepositoryInterface is a mock of SessionRepositoryInterface interface.
type MockSessionRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryInterfaceMockRecorder
}

// MockSessionRepositoryInterfaceMockRecorder is the mock recorder for MockSessionRepositoryInterface.
type MockSessionRepositoryInterfaceMockRecorder struct {
	mock *MockSessionRepositoryInterface
}

// NewMockSessionRepositoryInterface creates a new mock instance.
func NewMockSessionRepositoryInterface(ctrl *gomock.Controller) *MockSessionRepositoryInterface {
	mock := &MockSessionRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepositoryInterface) EXPECT() *MockSessionRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteSession mocks base method.
func (m *MockSessionRepositoryInterface) DeleteSession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionRepositoryInterfaceMockRecorder) DeleteSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionRepositoryInterface)(nil).DeleteSession), ctx, sessionID)
}

// GetSession mocks base method.
func (m *MockSessionRepositoryInterface) GetSession(ctx context.Context, sessionID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, sessionID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockSessionRepositoryInterfaceMockRecorder) GetSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionRepositoryInterface)(nil).GetSession), ctx, sessionID)
}

// StoreSession mocks base method.
func (m *MockSessionRepositoryInterface) StoreSession(ctx context.Context, newSessionID, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSession", ctx, newSessionID, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSession indicates an expected call of StoreSession.
func (mr *MockSessionRepositoryInterfaceMockRecorder) StoreSession(ctx, newSessionID, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSession", reflect.TypeOf((*MockSessionRepositoryInterface)(nil).StoreSession), ctx, newSessionID, login)
}
