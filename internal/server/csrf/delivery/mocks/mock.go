// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mocks/mock.go
//

// Package mock_delivery is a generated GoMock package.
package mock_delivery

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCSRFHandlerInterface is a mock of CSRFHandlerInterface interface.
type MockCSRFHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCSRFHandlerInterfaceMockRecorder
	isgomock struct{}
}

// MockCSRFHandlerInterfaceMockRecorder is the mock recorder for MockCSRFHandlerInterface.
type MockCSRFHandlerInterfaceMockRecorder struct {
	mock *MockCSRFHandlerInterface
}

// NewMockCSRFHandlerInterface creates a new mock instance.
func NewMockCSRFHandlerInterface(ctrl *gomock.Controller) *MockCSRFHandlerInterface {
	mock := &MockCSRFHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockCSRFHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSRFHandlerInterface) EXPECT() *MockCSRFHandlerInterfaceMockRecorder {
	return m.recorder
}

// CreateCSRFTokenHandler mocks base method.
func (m *MockCSRFHandlerInterface) CreateCSRFTokenHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateCSRFTokenHandler", w, r)
}

// CreateCSRFTokenHandler indicates an expected call of CreateCSRFTokenHandler.
func (mr *MockCSRFHandlerInterfaceMockRecorder) CreateCSRFTokenHandler(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCSRFTokenHandler", reflect.TypeOf((*MockCSRFHandlerInterface)(nil).CreateCSRFTokenHandler), w, r)
}
