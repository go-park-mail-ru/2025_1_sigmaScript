// Code generated by MockGen. DO NOT EDIT.
// Source: movie_service.go

// Package service_mocks is a generated GoMock package.
package service_mocks

import (
	context "context"
	reflect "reflect"

	mocks "github.com/go-park-mail-ru/2025_1_sigmaScript/internal/server/mocks"
	gomock "github.com/golang/mock/gomock"
)

// MockMovieRepositoryInterface is a mock of MovieRepositoryInterface interface.
type MockMovieRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepositoryInterfaceMockRecorder
}

// MockMovieRepositoryInterfaceMockRecorder is the mock recorder for MockMovieRepositoryInterface.
type MockMovieRepositoryInterfaceMockRecorder struct {
	mock *MockMovieRepositoryInterface
}

// NewMockMovieRepositoryInterface creates a new mock instance.
func NewMockMovieRepositoryInterface(ctrl *gomock.Controller) *MockMovieRepositoryInterface {
	mock := &MockMovieRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockMovieRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepositoryInterface) EXPECT() *MockMovieRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateNewMovieReviewInRepo mocks base method.
func (m *MockMovieRepositoryInterface) CreateNewMovieReviewInRepo(ctx context.Context, movieID int, newReview mocks.ReviewJSON) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewMovieReviewInRepo", ctx, movieID, newReview)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewMovieReviewInRepo indicates an expected call of CreateNewMovieReviewInRepo.
func (mr *MockMovieRepositoryInterfaceMockRecorder) CreateNewMovieReviewInRepo(ctx, movieID, newReview interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewMovieReviewInRepo", reflect.TypeOf((*MockMovieRepositoryInterface)(nil).CreateNewMovieReviewInRepo), ctx, movieID, newReview)
}

// GetAllReviewsOfMovieFromRepoByID mocks base method.
func (m *MockMovieRepositoryInterface) GetAllReviewsOfMovieFromRepoByID(ctx context.Context, movieID int) (*[]mocks.ReviewJSON, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllReviewsOfMovieFromRepoByID", ctx, movieID)
	ret0, _ := ret[0].(*[]mocks.ReviewJSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReviewsOfMovieFromRepoByID indicates an expected call of GetAllReviewsOfMovieFromRepoByID.
func (mr *MockMovieRepositoryInterfaceMockRecorder) GetAllReviewsOfMovieFromRepoByID(ctx, movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReviewsOfMovieFromRepoByID", reflect.TypeOf((*MockMovieRepositoryInterface)(nil).GetAllReviewsOfMovieFromRepoByID), ctx, movieID)
}

// GetMovieFromRepoByID mocks base method.
func (m *MockMovieRepositoryInterface) GetMovieFromRepoByID(ctx context.Context, movieID int) (*mocks.MovieJSON, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieFromRepoByID", ctx, movieID)
	ret0, _ := ret[0].(*mocks.MovieJSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieFromRepoByID indicates an expected call of GetMovieFromRepoByID.
func (mr *MockMovieRepositoryInterfaceMockRecorder) GetMovieFromRepoByID(ctx, movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieFromRepoByID", reflect.TypeOf((*MockMovieRepositoryInterface)(nil).GetMovieFromRepoByID), ctx, movieID)
}
