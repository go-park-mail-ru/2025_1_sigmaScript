// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_sigmaScript/internal/server/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateUserPostgres mocks base method.
func (m *MockUserRepositoryInterface) CreateUserPostgres(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPostgres", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserPostgres indicates an expected call of CreateUserPostgres.
func (mr *MockUserRepositoryInterfaceMockRecorder) CreateUserPostgres(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPostgres", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CreateUserPostgres), ctx, user)
}

// DeleteUserPostgres mocks base method.
func (m *MockUserRepositoryInterface) DeleteUserPostgres(ctx context.Context, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPostgres", ctx, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPostgres indicates an expected call of DeleteUserPostgres.
func (mr *MockUserRepositoryInterfaceMockRecorder) DeleteUserPostgres(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPostgres", reflect.TypeOf((*MockUserRepositoryInterface)(nil).DeleteUserPostgres), ctx, login)
}

// GetUserPostgres mocks base method.
func (m *MockUserRepositoryInterface) GetUserPostgres(ctx context.Context, login string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPostgres", ctx, login)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPostgres indicates an expected call of GetUserPostgres.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUserPostgres(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPostgres", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUserPostgres), ctx, login)
}

// UpdateUserPostgres mocks base method.
func (m *MockUserRepositoryInterface) UpdateUserPostgres(ctx context.Context, login string, user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPostgres", ctx, login, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPostgres indicates an expected call of UpdateUserPostgres.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpdateUserPostgres(ctx, login, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPostgres", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpdateUserPostgres), ctx, login, user)
}
