// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieRPCClient is the client API for MovieRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieRPCClient interface {
	GetMovieByID(ctx context.Context, in *GetMovieByIDRequest, opts ...grpc.CallOption) (*GetMovieByIDResponse, error)
	GetAllReviewsOfMovieByID(ctx context.Context, in *GetAllReviewsOfMovieByIDRequest, opts ...grpc.CallOption) (*GetAllReviewsOfMovieByIDResponse, error)
	CreateNewMovieReview(ctx context.Context, in *CreateNewMovieReviewRequest, opts ...grpc.CallOption) (*CreateNewMovieReviewResponse, error)
	UpdateMovieReview(ctx context.Context, in *UpdateMovieReviewRequest, opts ...grpc.CallOption) (*UpdateMovieReviewResponse, error)
	GetPersonByID(ctx context.Context, in *GetPersonByIDRequest, opts ...grpc.CallOption) (*GetPersonByIDResponse, error)
	GetGenreByID(ctx context.Context, in *GetGenreByIDRequest, opts ...grpc.CallOption) (*GetGenreByIDResponse, error)
	GetAllGenres(ctx context.Context, in *GetAllGenresRequest, opts ...grpc.CallOption) (*GetAllGenresResponse, error)
	SearchActorsAndMovies(ctx context.Context, in *SearchActorsAndMoviesRequest, opts ...grpc.CallOption) (*SearchActorsAndMoviesResponse, error)
	GetMainPageCollections(ctx context.Context, in *GetMainPageCollectionsRequest, opts ...grpc.CallOption) (*GetMainPageCollectionsResponse, error)
}

type movieRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieRPCClient(cc grpc.ClientConnInterface) MovieRPCClient {
	return &movieRPCClient{cc}
}

func (c *movieRPCClient) GetMovieByID(ctx context.Context, in *GetMovieByIDRequest, opts ...grpc.CallOption) (*GetMovieByIDResponse, error) {
	out := new(GetMovieByIDResponse)
	err := c.cc.Invoke(ctx, "/movieservice.MovieRPC/GetMovieByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRPCClient) GetAllReviewsOfMovieByID(ctx context.Context, in *GetAllReviewsOfMovieByIDRequest, opts ...grpc.CallOption) (*GetAllReviewsOfMovieByIDResponse, error) {
	out := new(GetAllReviewsOfMovieByIDResponse)
	err := c.cc.Invoke(ctx, "/movieservice.MovieRPC/GetAllReviewsOfMovieByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRPCClient) CreateNewMovieReview(ctx context.Context, in *CreateNewMovieReviewRequest, opts ...grpc.CallOption) (*CreateNewMovieReviewResponse, error) {
	out := new(CreateNewMovieReviewResponse)
	err := c.cc.Invoke(ctx, "/movieservice.MovieRPC/CreateNewMovieReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRPCClient) UpdateMovieReview(ctx context.Context, in *UpdateMovieReviewRequest, opts ...grpc.CallOption) (*UpdateMovieReviewResponse, error) {
	out := new(UpdateMovieReviewResponse)
	err := c.cc.Invoke(ctx, "/movieservice.MovieRPC/UpdateMovieReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRPCClient) GetPersonByID(ctx context.Context, in *GetPersonByIDRequest, opts ...grpc.CallOption) (*GetPersonByIDResponse, error) {
	out := new(GetPersonByIDResponse)
	err := c.cc.Invoke(ctx, "/movieservice.MovieRPC/GetPersonByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRPCClient) GetGenreByID(ctx context.Context, in *GetGenreByIDRequest, opts ...grpc.CallOption) (*GetGenreByIDResponse, error) {
	out := new(GetGenreByIDResponse)
	err := c.cc.Invoke(ctx, "/movieservice.MovieRPC/GetGenreByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRPCClient) GetAllGenres(ctx context.Context, in *GetAllGenresRequest, opts ...grpc.CallOption) (*GetAllGenresResponse, error) {
	out := new(GetAllGenresResponse)
	err := c.cc.Invoke(ctx, "/movieservice.MovieRPC/GetAllGenres", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRPCClient) SearchActorsAndMovies(ctx context.Context, in *SearchActorsAndMoviesRequest, opts ...grpc.CallOption) (*SearchActorsAndMoviesResponse, error) {
	out := new(SearchActorsAndMoviesResponse)
	err := c.cc.Invoke(ctx, "/movieservice.MovieRPC/SearchActorsAndMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRPCClient) GetMainPageCollections(ctx context.Context, in *GetMainPageCollectionsRequest, opts ...grpc.CallOption) (*GetMainPageCollectionsResponse, error) {
	out := new(GetMainPageCollectionsResponse)
	err := c.cc.Invoke(ctx, "/movieservice.MovieRPC/GetMainPageCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieRPCServer is the server API for MovieRPC service.
// All implementations must embed UnimplementedMovieRPCServer
// for forward compatibility
type MovieRPCServer interface {
	GetMovieByID(context.Context, *GetMovieByIDRequest) (*GetMovieByIDResponse, error)
	GetAllReviewsOfMovieByID(context.Context, *GetAllReviewsOfMovieByIDRequest) (*GetAllReviewsOfMovieByIDResponse, error)
	CreateNewMovieReview(context.Context, *CreateNewMovieReviewRequest) (*CreateNewMovieReviewResponse, error)
	UpdateMovieReview(context.Context, *UpdateMovieReviewRequest) (*UpdateMovieReviewResponse, error)
	GetPersonByID(context.Context, *GetPersonByIDRequest) (*GetPersonByIDResponse, error)
	GetGenreByID(context.Context, *GetGenreByIDRequest) (*GetGenreByIDResponse, error)
	GetAllGenres(context.Context, *GetAllGenresRequest) (*GetAllGenresResponse, error)
	SearchActorsAndMovies(context.Context, *SearchActorsAndMoviesRequest) (*SearchActorsAndMoviesResponse, error)
	GetMainPageCollections(context.Context, *GetMainPageCollectionsRequest) (*GetMainPageCollectionsResponse, error)
	mustEmbedUnimplementedMovieRPCServer()
}

// UnimplementedMovieRPCServer must be embedded to have forward compatible implementations.
type UnimplementedMovieRPCServer struct {
}

func (UnimplementedMovieRPCServer) GetMovieByID(context.Context, *GetMovieByIDRequest) (*GetMovieByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieByID not implemented")
}
func (UnimplementedMovieRPCServer) GetAllReviewsOfMovieByID(context.Context, *GetAllReviewsOfMovieByIDRequest) (*GetAllReviewsOfMovieByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReviewsOfMovieByID not implemented")
}
func (UnimplementedMovieRPCServer) CreateNewMovieReview(context.Context, *CreateNewMovieReviewRequest) (*CreateNewMovieReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewMovieReview not implemented")
}
func (UnimplementedMovieRPCServer) UpdateMovieReview(context.Context, *UpdateMovieReviewRequest) (*UpdateMovieReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovieReview not implemented")
}
func (UnimplementedMovieRPCServer) GetPersonByID(context.Context, *GetPersonByIDRequest) (*GetPersonByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonByID not implemented")
}
func (UnimplementedMovieRPCServer) GetGenreByID(context.Context, *GetGenreByIDRequest) (*GetGenreByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenreByID not implemented")
}
func (UnimplementedMovieRPCServer) GetAllGenres(context.Context, *GetAllGenresRequest) (*GetAllGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGenres not implemented")
}
func (UnimplementedMovieRPCServer) SearchActorsAndMovies(context.Context, *SearchActorsAndMoviesRequest) (*SearchActorsAndMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchActorsAndMovies not implemented")
}
func (UnimplementedMovieRPCServer) GetMainPageCollections(context.Context, *GetMainPageCollectionsRequest) (*GetMainPageCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMainPageCollections not implemented")
}
func (UnimplementedMovieRPCServer) mustEmbedUnimplementedMovieRPCServer() {}

// UnsafeMovieRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieRPCServer will
// result in compilation errors.
type UnsafeMovieRPCServer interface {
	mustEmbedUnimplementedMovieRPCServer()
}

func RegisterMovieRPCServer(s grpc.ServiceRegistrar, srv MovieRPCServer) {
	s.RegisterService(&MovieRPC_ServiceDesc, srv)
}

func _MovieRPC_GetMovieByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRPCServer).GetMovieByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movieservice.MovieRPC/GetMovieByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRPCServer).GetMovieByID(ctx, req.(*GetMovieByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRPC_GetAllReviewsOfMovieByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReviewsOfMovieByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRPCServer).GetAllReviewsOfMovieByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movieservice.MovieRPC/GetAllReviewsOfMovieByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRPCServer).GetAllReviewsOfMovieByID(ctx, req.(*GetAllReviewsOfMovieByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRPC_CreateNewMovieReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewMovieReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRPCServer).CreateNewMovieReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movieservice.MovieRPC/CreateNewMovieReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRPCServer).CreateNewMovieReview(ctx, req.(*CreateNewMovieReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRPC_UpdateMovieReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRPCServer).UpdateMovieReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movieservice.MovieRPC/UpdateMovieReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRPCServer).UpdateMovieReview(ctx, req.(*UpdateMovieReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRPC_GetPersonByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRPCServer).GetPersonByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movieservice.MovieRPC/GetPersonByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRPCServer).GetPersonByID(ctx, req.(*GetPersonByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRPC_GetGenreByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenreByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRPCServer).GetGenreByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movieservice.MovieRPC/GetGenreByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRPCServer).GetGenreByID(ctx, req.(*GetGenreByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRPC_GetAllGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRPCServer).GetAllGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movieservice.MovieRPC/GetAllGenres",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRPCServer).GetAllGenres(ctx, req.(*GetAllGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRPC_SearchActorsAndMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchActorsAndMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRPCServer).SearchActorsAndMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movieservice.MovieRPC/SearchActorsAndMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRPCServer).SearchActorsAndMovies(ctx, req.(*SearchActorsAndMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRPC_GetMainPageCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMainPageCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRPCServer).GetMainPageCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movieservice.MovieRPC/GetMainPageCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRPCServer).GetMainPageCollections(ctx, req.(*GetMainPageCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieRPC_ServiceDesc is the grpc.ServiceDesc for MovieRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movieservice.MovieRPC",
	HandlerType: (*MovieRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovieByID",
			Handler:    _MovieRPC_GetMovieByID_Handler,
		},
		{
			MethodName: "GetAllReviewsOfMovieByID",
			Handler:    _MovieRPC_GetAllReviewsOfMovieByID_Handler,
		},
		{
			MethodName: "CreateNewMovieReview",
			Handler:    _MovieRPC_CreateNewMovieReview_Handler,
		},
		{
			MethodName: "UpdateMovieReview",
			Handler:    _MovieRPC_UpdateMovieReview_Handler,
		},
		{
			MethodName: "GetPersonByID",
			Handler:    _MovieRPC_GetPersonByID_Handler,
		},
		{
			MethodName: "GetGenreByID",
			Handler:    _MovieRPC_GetGenreByID_Handler,
		},
		{
			MethodName: "GetAllGenres",
			Handler:    _MovieRPC_GetAllGenres_Handler,
		},
		{
			MethodName: "SearchActorsAndMovies",
			Handler:    _MovieRPC_SearchActorsAndMovies_Handler,
		},
		{
			MethodName: "GetMainPageCollections",
			Handler:    _MovieRPC_GetMainPageCollections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/movie.proto",
}
